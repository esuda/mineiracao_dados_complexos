}
return(dec)
}
lapply(list(...), transform)
}
##### Exemplos no PDF:
binToDec(c(1, 0))
binToDec(c(0, 0, 1), c(1, 1))
binToDec <- function(...){
transform <- function(bin){
bin <- unlist(bin)
pos <- length(bin)
dec <- 0
while (pos > 0){
dec <- dec + (bin[pos]*2^(length(bin)-pos))
pos = pos - 1
}
return(dec)
}
ans <- lapply(list(...), transform)
return(unlist(ans))
}
##### Exemplos no PDF:
binToDec(c(1, 0))
binToDec(c(0, 0, 1), c(1, 1))
binToDec(rep(1, 3), rep(0, 2), rep(c(1,0), 2))
##################################################################
# Mineração de Dados Complexos -- MDC 2021
# Recuperação de Informação
# Pacotes extras para a Aula 3 - Recuperação de Imagens
#
#
#
# Abra este arquivo com o Rstudio e execute cada
# linha separadamente. Caso encontre algum erro entre
# em contato com os monitores. Lembre-se de indicar
# aos monitores o seu sistemaa operacional e a versão
# do R instalada.
##################################################################
# Instalando o pacote
install.packages("imager")
# Carregando o pacote
library(imager)
# Instalando o pacote
install.packages("OpenImageR")
# Carregando o pacote
library(OpenImageR)
install.packages("IM_1.0.tar.gz", repos = NULL)
# Carregando o pacote
library(IM)
# Instalando o pacote
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(wvtool)
# Mensagem esperada:
# (Sem mensagem)
# Instalando o pacote
install.packages("gridExtra")
# Carregando o pacote
library(gridExtra)
# Mensagem esperada:
# (Sem mensagem)
# Instalando o pacote
install.packages("wvtool")
# Carregando o pacote
library(wvtool)
# Mensagem esperada:
# (Sem mensagem)
# Instalando o pacote
install.packages("raster")
# Carregando o pacote
library(raster)
# Instalando o pacote
install.packages("grDevices")
# Carregando o pacote
library(grDevices)
# Mensagem esperada:
# (Sem mensagem)
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
library(grDevices)
binToDec <- function(...){
transform <- function(bin){
#bin <- unlist(bin)
pos <- length(bin)
dec <- 0
while (pos > 0){
dec <- dec + (bin[pos]*2^(length(bin)-pos))
pos = pos - 1
}
return(dec)
}
ans <- lapply(list(...), transform)
return(unlist(ans))
}
binToDec <- function(...){
transform <- function(bin){
#bin <- unlist(bin)
pos <- length(bin)
dec <- 0
while (pos > 0){
dec <- dec + (bin[pos]*2^(length(bin)-pos))
pos = pos - 1
}
return(dec)
}
ans <- sapply(list(...), transform)
return(unlist(ans))
}
##### Exemplos no PDF:
binToDec(c(1, 0))
binToDec(c(0, 0, 1), c(1, 1))
binToDec(rep(1, 3), rep(0, 2), rep(c(1,0), 2))
binToDec <- function(...){
transform <- function(bin){
#bin <- unlist(bin)
pos <- length(bin)
dec <- 0
while (pos > 0){
dec <- dec + (bin[pos]*2^(length(bin)-pos))
pos = pos - 1
}
return(dec)
}
ans <- sapply(list(...), transform)
return(ans)
}
##### Exemplos no PDF:
binToDec(c(1, 0))
binToDec(c(0, 0, 1), c(1, 1))
binToDec(rep(1, 3), rep(0, 2), rep(c(1,0), 2))
wordCount <- function(word, text){
punct <- '.,!?'
txt_list <- chartr(punct, '', tolower(txt_list))
return(txt_list)
}
##### Exemplos no PDF:
text <- "O rAto roeu a roupa do Rei de Roma! RainhA raivosa rasgou o resto."
wordCount("rato", text)
wordCount <- function(word, text){
punct <- '.,!?'
txt_list <- chartr(punct, '', tolower(text))
return(txt_list)
}
text <- "O rAto roeu a roupa do Rei de Roma! RainhA raivosa rasgou o resto."
wordCount("rato", text)
wordCount <- function(word, text){
punct <- '.,!?'
txt_list <- chartr(punct, '    ', tolower(text))
return(txt_list)
}
)
wordCount("rato", text)
txt_list <- strsplit(chartr(punct, '    ', tolower(text)), split=' ')
wordCount <- function(word, text){
punct <- '.,!?'
txt_list <- strsplit(chartr(punct, '    ', tolower(text)), split=' ')
return(txt_list)
}
wordCount("rato", text)
wordCount <- function(word, text){
punct <- '[.,!?]*'
txt_list <- strsplit(gsub(punct, '', tolower(text)), split=' ')
return(txt_list)
}
wordCount("rato", text)
wordCount <- function(word, text){
punct <- '[.,!?]'
txt_list <- strsplit(gsub(punct, '', tolower(text)), split=' ')
return(txt_list)
}
wordCount("rato", text)
ans <- tapply(txt_list, txt_list, count)
wordCount <- function(word, text){
punct <- '[.,!?]*'
txt_list <- strsplit(gsub(punct, '', tolower(text)), split=' ')
counts <- tapply(txt_list, txt_list, count)
return(counts)
}
wordCount("rato", text)
wordCount <- function(word, text){
punct <- '[.,!?]*'
txt_list <- strsplit(gsub(punct, '', tolower(text)), split=' ')
counts <- tapply(txt_list, txt_list, c)
return(counts)
}
wordCount("rato", text)
wordCount <- function(word, text){
punct <- '[.,!?]*'
txt_list <- strsplit(gsub(punct, '', tolower(text)), split=' ')
counts <- sum(txt_list == word)
return(counts)
}
wordCount("rato", text)
wordCount <- function(word, text){
punct <- '[.,!?]*'
txt_list <- strsplit(gsub(punct, '', tolower(text)), split=' ')
counts <- sum(txt_list == word)
return(txt_list)
}
wordCount("rato", text)
a <- wordCount("rato", text)
View(a)
a
a[1]
a[[1]]
wordCount <- function(word, text){
punct <- '[.,!?]*'
txt_list <- strsplit(gsub(punct, '', tolower(text)), split=' ')
counts <- sum(txt_list[[1]] == word)
return(txt_list)
}
wordCount <- function(word, text){
punct <- '[.,!?]*'
txt_list <- strsplit(gsub(punct, '', tolower(text)), split=' ')
counts <- sum(txt_list[[1]] == word)
return(counts)
}
wordCount("rato", text)
wordCount <- function(word, text){
punct <- '[.,!?]*'
txt_list <- strsplit(gsub(punct, '', tolower(text)), split=' ')
counts <- sum(txt_list[[1]] == word)
return(txt_list[[1]], counts)
}
text <- "O rAto roeu a roupa do Rei de Roma! RainhA raivosa rasgou o resto."
wordCount("rato", text)
list, counts <- wordCount("rato", text)
mylist, counts <- wordCount("rato", text)
counts <- wordCount("rato", text)
wordCount <- function(word, text){
punct <- '[.,!?]*'
txt_list <- strsplit(gsub(punct, '', tolower(text)), split=' ')
counts <- sum(txt_list[[1]] == word)
return(counts)
}
wordCount <- function(word, text){
punct <- '[.,!?]*'
txt_list <- strsplit(gsub(punct, '', tolower(text)), split=' ')
counts <- sum(txt_list[[1]] == word)
print(txt_list[[1]])
return(counts)
}
counts <- wordCount("rato", text)
wordCount("rato", text)
text <- "A vaca malHada foi molhADA por outra VACA, MOLhada e MALhaDa."
wordCount("outra", text)
wordCount("vaca", text)
wordCount("malhada", text)
wordCount("roma", text)
wordCount("roma", text)
text <- "O rAto roeu a roupa do Rei de Roma! RainhA raivosa rasgou o resto."
wordCount("rato", text)
wordCount("roma", text)
text <- "A vaca malHada foi molhADA por outra VACA, MOLhada e MALhaDa."
wordCount("outra", text)
wordCount("vaca", text)
wordCount("malhada", text)
text <- "Se a liga me ligasse, eu tambem ligava a liga. Mas a liga nao me liga, eu tambem nao ligo a liga."
wordCount("liga", text)
wordCount("ligasse", text)
#----------------------------------------------------------------#
# INF-0611 Recuperacao de Informacao                             #
#                                                                #
# Trabalho Avaliativo 2                                          #
#----------------------------------------------------------------#
# Nome COMPLETO dos integrantes do grupo:                        #
# -                                                              #
# -                                                              #
# -                                                              #
#                                                                #
#----------------------------------------------------------------#
#----------------------------------------------------------------#
# Configuracao dos arquivos auxiliares
#----------------------------------------------------------------#
# configure o caminho antes de executar
setwd("C:\\Users\\Eric\\Documents\\GitHub\\mineiracao_dados_complexos\\Recuperacao de Informacao\\Atividade 2\\")
source("./ranking_metrics.R")
source("./trabalho2_base.R")
# caminho da pasta de imagens
path_plantas = './plantas'
#----------------------------------------------------------------#
# Leitura das imagens
#----------------------------------------------------------------#
imagens <- read_images(path_plantas)
#----------------------------------------------------------------#
# Obtem classe de cada imagem
#----------------------------------------------------------------#
nome_classes <- get_classes(path_plantas)
#----------------------------------------------------------------#
# obtem ground_truth para cada classe
#----------------------------------------------------------------#
ground_truth_biloba <- get_ground_truth(path_plantas, nome_classes, 'biloba')
ground_truth_europaea <- get_ground_truth(path_plantas, nome_classes, 'europaea')
ground_truth_ilex <- get_ground_truth(path_plantas, nome_classes, 'ilex')
ground_truth_monogyna <- get_ground_truth(path_plantas, nome_classes, 'monogyna')
ground_truth_regia <- get_ground_truth(path_plantas, nome_classes, 'regia')
#----------------------------------------------------------------#
# Questao 1
#----------------------------------------------------------------#
# obtem caracteristicas de cor
hist_cor_desc <- function(img){
r <- hist(img[,,1]*255, plot=FALSE, breaks=0:255)$counts
g <- hist(img[,,2]*255, plot=FALSE, breaks=0:255)$counts
b <- hist(img[,,3]*255, plot=FALSE, breaks=0:255)$counts
return(c(r, g, b))
}
# obtem caracteristicas de textura
lbp_desc <- function(img){
r1 <- lbp(img[,,1,1],1)
lbp_uniforme <- hist(r1$lbp.u2, plot=FALSE, breaks=59)$counts
return(lbp_uniforme)
}
# obtem caracteristicas de forma
Momentos <-function(img){
centroide <- function(M) {
c(momento(M, 1, 0) / momento(M, 0, 0),
momento(M, 0, 1) / momento(M, 0, 0))
}
momento <- function(M, p, q, central = FALSE) {
r <- 0
if (central) {
c <- centroide(M)
x <- c[1]
y <- c[2]
} else {
x <- 0
y <- 0
}
for (i in 1:nrow(M))
for (j in 1:ncol(M))
r <- r + (i - x)^p * (j - y)^q * M[i,j]
return(r)
}
area <- function(M) {
momento(M, 0, 0, central = TRUE)
}
assimetria <- function(M) {
momento(M, 3, 3, central = TRUE)
}
curtose <- function(M) {
momento(M, 4, 4, central = TRUE)
}
aux <- img[,,1,1]
m00 <- area(aux)
m33 <- assimetria(aux)
m44 <- curtose(aux)
return(c(m00, m33, m44))
}
#----------------------------------------------------------------#
# obtem caracteristicas de cor, textura e forma para todas as imagens e
# armazena em matrizes onde uma linha representa uma imagem
gray_img <- sapply(imagens, grayscale)
features_c <- t(sapply(imagens, hist_cor_desc))
rownames(features_c) <- names(imagens)
features_t <- t(sapply(gray_img, lbp_desc))
rownames(features_t) <- names(gray_img)
features_s <- t(sapply(gray_img, Momentos))
rownames(features_s) <- names(gray_img)
#----------------------------------------------------------------#
# Questao 2
#----------------------------------------------------------------#
# definindo as consultas
# obs.:  use o caminho completo para a imagem
consulta_biloba <- "./plantas/biloba_02.jpg"
consulta_europaea <- "./plantas/europaea_01.jpg"
consulta_ilex <- "./plantas/ilex_08.jpg"
consulta_monogyna <- "./plantas/monogyna_04.jpg"
consulta_regia <- "./plantas/regia_07.jpg"
# visualizando as consultas
par(mfrow = c(3,3), mar = rep(2, 4))
mostrarImagemColorida(consulta_biloba, consulta_biloba)
mostrarImagemColorida(consulta_europaea, consulta_europaea)
mostrarImagemColorida(consulta_ilex, consulta_ilex)
mostrarImagemColorida(consulta_monogyna, consulta_monogyna)
mostrarImagemColorida(consulta_regia, consulta_regia)
#-----------------------------#
# construindo rankings
# para cada uma das 5 consultas, construa um ranking com base na cor
ranking_c_biloba <-   get_ranking_by_distance(features_c, consulta_biloba, method="euclidean")
ranking_c_europaea <- get_ranking_by_distance(features_c, consulta_europaea, method="euclidean")
ranking_c_ilex <-     get_ranking_by_distance(features_c, consulta_ilex, method="euclidean")
ranking_c_monogyna <- get_ranking_by_distance(features_c, consulta_monogyna, method="euclidean")
ranking_c_regia <-    get_ranking_by_distance(features_c, consulta_regia, method="euclidean")
# para cada uma das 5 consultas, construa um ranking com base na textura
ranking_t_biloba <-   get_ranking_by_distance(features_t, consulta_biloba, method="euclidean")
ranking_t_europaea <- get_ranking_by_distance(features_t, consulta_europaea, method="euclidean")
ranking_t_ilex <-     get_ranking_by_distance(features_t, consulta_ilex, method="euclidean")
ranking_t_monogyna <- get_ranking_by_distance(features_t, consulta_monogyna, method="euclidean")
ranking_t_regia <-    get_ranking_by_distance(features_t, consulta_regia, method="euclidean")
# para cada uma das 5 consultas, construa um ranking com base na forma
ranking_s_biloba <-   get_ranking_by_distance(features_s, consulta_biloba, method="euclidean")
ranking_s_europaea <- get_ranking_by_distance(features_s, consulta_europaea, method="euclidean")
ranking_s_ilex <-     get_ranking_by_distance(features_s, consulta_ilex, method="euclidean")
ranking_s_monogyna <- get_ranking_by_distance(features_s, consulta_monogyna, method="euclidean")
ranking_s_regia <-    get_ranking_by_distance(features_s, consulta_regia, method="euclidean")
#-----------------------------#
# comparando  rankings
## utilize as funções do arquivo ranking_metrics.R para calcular
# a precisão, revocação, taxa F1 e precisão média nos
# top 5, 10, 15 e 20
analyse_rankings <- function(ranking, ground_truth) {
top_k <- c(5, 10, 15, 20)
resultados <- c()
for (k in top_k){
precisao <- precision(ground_truth, ranking, k)
revocacao <-  recall(ground_truth, ranking, k)
f1 <- f1_score(ground_truth, ranking, k)
avg_prec <- ap(ground_truth, ranking, k)
resultados <- rbind(resultados, c(k, precisao, revocacao, f1, avg_prec))
}
df <- data.frame(resultados)
colnames(df) <- c('k', 'precisao', 'revocacao', 'f1', 'avg_prec')
return(df)
}
# analisando rankings gerados com caracteristicas de cor
analyse_rankings(ranking_c_biloba, ground_truth_biloba)
analyse_rankings(ranking_c_europaea, ground_truth_europaea)
analyse_rankings(ranking_c_ilex, ground_truth_ilex)
analyse_rankings(ranking_c_monogyna, ground_truth_monogyna)
analyse_rankings(ranking_c_regia, ground_truth_regia)
# analisando rankings gerados com caracteristicas de textura
analyse_rankings(ranking_t_biloba, ground_truth_biloba)
analyse_rankings(ranking_t_europaea, ground_truth_europaea)
analyse_rankings(ranking_t_ilex, ground_truth_ilex)
analyse_rankings(ranking_t_monogyna, ground_truth_monogyna)
analyse_rankings(ranking_t_regia, ground_truth_regia)
# analisando rankings gerados com caracteristicas de forma
analyse_rankings(ranking_s_biloba, ground_truth_biloba)
analyse_rankings(ranking_s_europaea, ground_truth_europaea)
analyse_rankings(ranking_s_ilex, ground_truth_ilex)
analyse_rankings(ranking_s_monogyna, ground_truth_monogyna)
analyse_rankings(ranking_s_regia, ground_truth_regia)
# Analise de dados
plot_prec_e_rev(ranking_c_biloba, ground_truth_biloba, 20, 'Ranking Cor')
plot_prec_e_rev(ranking_t_biloba, ground_truth_biloba, 20, 'Ranking Cor')
plot_prec_e_rev(ranking_s_biloba, ground_truth_biloba, 20, 'Ranking Cor')
mostrarGrayscale <- function(path_img, nome=''){
path_img <- as.character(path_img)
img <- load.image(path_img)
return(plot(grayscale(img), axes = FALSE, main = nome))
}
hist_lbp <- function(img){
r1 <- lbp(img[,,1,1],1)
lbp_uniforme <- hist(r1$lbp.u2, plot=True, breaks=59)$counts
return(lbp_uniforme)
}
for (img in gray_img[1]){
r1 <- lbp(img[,,1,1],1)
lbp_uniforme <- hist(r1$lbp.u2, plot=TRUE, breaks=59)$counts
return(plot(lbp_uniforme))
}
for (img in gray_img[1]){
r1 <- lbp(img[,,1,1],1)
lbp_uniforme <- hist(r1$lbp.u2, plot=TRUE, breaks=59)$counts
return(plot(lbp_uniforme))
}
for (img in gray_img[1]){
#path_img <- as.character(path_img)
#img <- load.image(path_img)
r1 <- lbp(img[,,1,1],1)
lbp_uniforme <- hist(r1$lbp.u2, plot=TRUE, breaks=59)$counts
}
par(mfrow = c(4,5), mar = rep(2, 4))
for (img_name in ranking_s_biloba[1]){
path_img <- as.character(path_img)
img <- load.image(path_img)
gsc <- grayscale(img)
r1 <- lbp(gsc[,,1,1],1)
lbp_uniforme <- hist(r1$lbp.u2, main=img_name, plot=TRUE, breaks=59)$counts
}
for (img_name in ranking_s_biloba[1]){
path_img <- as.character(img_name)
img <- load.image(path_img)
gsc <- grayscale(img)
r1 <- lbp(gsc[,,1,1],1)
lbp_uniforme <- hist(r1$lbp.u2, main=img_name, plot=TRUE, breaks=59)$counts
}
for (img_name in ranking_s_biloba[1:20]){
path_img <- as.character(img_name)
img <- load.image(path_img)
gsc <- grayscale(img)
r1 <- lbp(gsc[,,1,1],1)
lbp_uniforme <- hist(r1$lbp.u2, main=img_name, plot=TRUE, breaks=59)$counts
}
for (img_name in ranking_t_biloba[1:2]){
path_img <- as.character(img_name)
img <- load.image(path_img)
gsc <- grayscale(img)
r1 <- lbp(gsc[,,1,1],1)
lbp_uniforme <- hist(r1$lbp.u2, main=img_name, plot=TRUE, breaks=59)$counts
}
ranking_t_biloba
par(mfrow = c(4,5), mar = rep(2, 4))
for (img_name in ranking_t_biloba[1:2]){
path_img <- as.character(img_name)
img <- load.image(path_img)
gsc <- grayscale(img)
r1 <- lbp(gsc[,,1,1],1)
lbp_uniforme <- hist(r1$lbp.u2, main=img_name, plot=TRUE, breaks=59)$counts
}
par(mfrow = c(4,5), mar = rep(2, 4))
for (img_name in ranking_t_biloba[1:20]){
path_img <- as.character(img_name)
img <- load.image(path_img)
gsc <- grayscale(img)
r1 <- lbp(gsc[,,1,1],1)
lbp_uniforme <- hist(r1$lbp.u2, main=img_name, plot=TRUE, breaks=59)$counts
}
View(features_s)
