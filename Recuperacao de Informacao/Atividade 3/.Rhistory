ranking_concat <- get_ranking_by_distance(feature, vetor_consultas[i], method=“euclidean”)
avg_p <- analyse_rankings(vetor_consultas[i], vetor_groundtruth[i])[2,5] + avg_p
}
return(avg_p/k)
}
get_rankings_individuais(features_c)
# Melhor metodo em top 10
get_rankings_individuais <- function(feature){
k=5
# Ranking Concatenado
vetor_consultas <- c(
consulta_biloba,
consulta_europaea,
consulta_ilex,
consulta_monogyna,
consulta_regia
)
vetor_groundtruth <- c(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
avg_p = 0
for (i in 1:5){
ranking_concat <- get_ranking_by_distance(feature, vetor_consultas[i], method='euclidean')
avg_p <- analyse_rankings(vetor_consultas[i], vetor_groundtruth[i])[2,5] + avg_p
}
return(avg_p/k)
}
get_rankings_individuais(features_c)
consulta_biloba
ground_truth_biloba
analyse_rankings(consulta_biloba, ground_truth_biloba)
# Melhor metodo em top 10
get_rankings_individuais <- function(feature){
k=5
# Ranking Concatenado
vetor_consultas <- c(
consulta_biloba,
consulta_europaea,
consulta_ilex,
consulta_monogyna,
consulta_regia
)
vetor_groundtruth <- c(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
avg_p = 0
for (i in 1:5){
ranking <- get_ranking_by_distance(feature, vetor_consultas[i], method='euclidean')
avg_p <- analyse_rankings(ranking, vetor_groundtruth[i])[2,5] + avg_p
}
return(avg_p/k)
}
get_rankings_individuais(features_c)
# Melhor metodo em top 10
get_rankings_individuais <- function(feature){
k=5
# Ranking Concatenado
vetor_consultas <- c(
consulta_biloba,
consulta_europaea,
consulta_ilex,
consulta_monogyna,
consulta_regia
)
vetor_groundtruth <- c(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
avg_p = 0
for (i in 1:5){
ranking <- get_ranking_by_distance(feature, vetor_consultas[i], method='euclidean')
print(ranking)
avg_p <- analyse_rankings(ranking, vetor_groundtruth[i])[2,5] + avg_p
}
return(avg_p/k)
}
get_rankings_individuais(features_c)
r_bordacount_biloba
ground_truth_biloba
vetor_groundtruth <- c(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
vetor_groundtruth[1]
ground_truth_biloba
# Melhor metodo em top 10
get_rankings_individuais <- function(feature){
k=5
# Ranking Concatenado
vetor_consultas <- c(
consulta_biloba,
consulta_europaea,
consulta_ilex,
consulta_monogyna,
consulta_regia
)
vetor_groundtruth <- list(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
avg_p = 0
for (i in 1:5){
ranking <- get_ranking_by_distance(feature, vetor_consultas[i], method='euclidean')
avg_p <- analyse_rankings(ranking, vetor_groundtruth[i])[2,5] + avg_p
}
return(avg_p/k)
}
get_rankings_individuais(features_c)
vetor_groundtruth <- list(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
vetor_groundtruth[1]
vetor_groundtruth[[1]]
# Melhor metodo em top 10
get_rankings_individuais <- function(feature){
k=5
# Ranking Concatenado
vetor_consultas <- c(
consulta_biloba,
consulta_europaea,
consulta_ilex,
consulta_monogyna,
consulta_regia
)
vetor_groundtruth <- list(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
avg_p = 0
for (i in 1:5){
ranking <- get_ranking_by_distance(feature, vetor_consultas[i], method='euclidean')
avg_p <- analyse_rankings(ranking, vetor_groundtruth[[i]])[2,5] + avg_p
}
return(avg_p/k)
}
get_rankings_individuais(features_c)
get_rankings_individuais(features_t)
get_rankings_individuais(features_s)
get_rankings_individuais(desc_all)
get_rankings_agregados
get_rankings_agregados <- function(feature_c, feature_t, feature_s){
k=5
# Ranking Concatenado
vetor_consultas <- c(
consulta_biloba,
consulta_europaea,
consulta_ilex,
consulta_monogyna,
consulta_regia
)
vetor_groundtruth <- list(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
avg_p = 0
for (i in 1:5){
dist_c <- get_distance_vector(feature_c, vetor_consultas[i], method='euclidean')
dist_t <- get_distance_vector(feature_t, vetor_consultas[i], method='euclidean')
dist_s <- get_distance_vector(feature_s, vetor_consultas[i], method='euclidean')
r_combmax <- names(imagens)[combmax(dist_c, dist_t, dist_s)]
avg_p <- analyse_rankings(r_combmax, vetor_groundtruth[[i]])[2,5] + avg_p
}
return(avg_p/k)
}
get_rankings_agregados(features_c, features_t, features_s)
get_rankings_individuais(features_c)
get_rankings_individuais(features_t)
get_rankings_individuais(features_s)
get_rankings_individuais(desc_all)
get_rankings_agregados(features_c, features_t, features_s)
# Melhor metodo em top 10
get_rankings <- function(feature){
k=5
# Ranking Concatenado
vetor_consultas <- c(
consulta_biloba,
consulta_europaea,
consulta_ilex,
consulta_monogyna,
consulta_regia
)
vetor_groundtruth <- list(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
avg_p = 0
for (i in 1:5){
ranking <- get_ranking_by_distance(feature, vetor_consultas[i], method='euclidean')
avg_p <- analyse_rankings(ranking, vetor_groundtruth[[i]])[2,5] + avg_p
}
return(avg_p/k)
}
# Funcao para retornar o MAP o metodo de agregacao combmax
get_map_combmax <- function(feature_c, feature_t, feature_s){
k=5
# Ranking Concatenado
vetor_consultas <- c(
consulta_biloba,
consulta_europaea,
consulta_ilex,
consulta_monogyna,
consulta_regia
)
vetor_groundtruth <- list(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
avg_p = 0
for (i in 1:5){
dist_c <- get_distance_vector(feature_c, vetor_consultas[i], method='euclidean')
dist_t <- get_distance_vector(feature_t, vetor_consultas[i], method='euclidean')
dist_s <- get_distance_vector(feature_s, vetor_consultas[i], method='euclidean')
r_combmax <- names(imagens)[combmax(dist_c, dist_t, dist_s)]
avg_p <- analyse_rankings(r_combmax, vetor_groundtruth[[i]])[2,5] + avg_p
}
return(avg_p/k)
}
get_map <- function(feature){
k=5
# Ranking Concatenado
vetor_consultas <- c(
consulta_biloba,
consulta_europaea,
consulta_ilex,
consulta_monogyna,
consulta_regia
)
vetor_groundtruth <- list(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
avg_p = 0
for (i in 1:5){
ranking <- get_ranking_by_distance(feature, vetor_consultas[i], method='euclidean')
avg_p <- analyse_rankings(ranking, vetor_groundtruth[[i]])[2,5] + avg_p
}
return(avg_p/k)
}
# Funcao para retornar o MAP o metodo de agregacao combmax
get_map_combmax <- function(feature_c, feature_t, feature_s){
k=5
# Ranking Concatenado
vetor_consultas <- c(
consulta_biloba,
consulta_europaea,
consulta_ilex,
consulta_monogyna,
consulta_regia
)
vetor_groundtruth <- list(
ground_truth_biloba,
ground_truth_europaea,
ground_truth_ilex,
ground_truth_monogyna,
ground_truth_regia
)
avg_p = 0
for (i in 1:5){
dist_c <- get_distance_vector(feature_c, vetor_consultas[i], method='euclidean')
dist_t <- get_distance_vector(feature_t, vetor_consultas[i], method='euclidean')
dist_s <- get_distance_vector(feature_s, vetor_consultas[i], method='euclidean')
r_combmax <- names(imagens)[combmax(dist_c, dist_t, dist_s)]
avg_p <- analyse_rankings(r_combmax, vetor_groundtruth[[i]])[2,5] + avg_p
}
return(avg_p/k)
}
# Rankings para cada metodo
get_map(features_c)
get_map(features_t)
get_map(features_s)
get_map(desc_all)
get_map_combmax(features_c, features_t, features_s)
rm(list=ls())
# Importanto bibliotecas
library(ggplot2)
?url
# Importando csv
csv_url <- url("https://ic.unicamp.br/~zanoni/cepagri/cepagri.csv")
col_names <- c("horario", "temp", "vento", "umid", "sensa")
df <- read.table(csv_url, header=FALSE, fill=FALSE, sep=';', col.names=col_names)
cepagiri <- read.table(csv_url, header=FALSE, fill=FALSE, sep=';', col.names=col_names)
# Importando csv
csv_url <- url("https://ic.unicamp.br/~zanoni/cepagri/cepagri.csv")
col_names <- c("horario", "temp", "vento", "umid", "sensa")
cepagiri <- read.table(csv_url, header=FALSE, fill=FALSE, sep=';', col.names=col_names)
summary(cepagiri)
cepagiri <- read.table(csv_url,header=FALSE, fill=TRUE, sep=';', col.names=col_names)
csv_url <- url("https://ic.unicamp.br/~zanoni/cepagri/cepagri.csv")
col_names <- c("horario", "temp", "vento", "umid", "sensa")
cepagiri <- read.table(csv_url,header=FALSE, fill=TRUE, sep=';', col.names=col_names)
summary(cepagiri)
# -> existem 31.033 registros com vento, umid e sesacao NA
cepagiri[isna(cepagiri$vento)==TRUE]
# -> existem 31.033 registros com vento, umid e sesacao NA
cepagiri[is.na(cepagiri$vento)==TRUE]
# -> existem 31.033 registros com vento, umid e sesacao NA
cepagiri[is.na(cepagiri$vento)==TRUE]
# -> existem 31.033 registros com vento, umid e sesacao NA
cepagiri[is.na(cepagiri['vento'])==TRUE]
# -> existem 31.033 registros com vento, umid e sesacao NA
cepagiri[is.na(cepagiri[['vento']])==TRUE]
# -> existem 31.033 registros com vento, umid e sesacao NA
class(cepagiri[is.na(cepagiri['vento'])==TRUE])
# -> existem 31.033 registros com vento, umid e sesacao NA
is.na(cepagiri['vento'])
# -> existem 31.033 registros com vento, umid e sesacao NA
cepagiri[is.na(cepagiri['vento'])==TRUE]
# -> existem 31.033 registros com vento, umid e sesacao NA
empty_dates <- cepagiri[is.na(cepagiri['vento'])==TRUE]
strptime(empty_dates, format='%d/%m/%Y-%H:%M')
empty_dates_format <- strptime(empty_dates, format='%d/%m/%Y-%H:%M')
ceiling_date(empty_dates_format, unit='day')
table(ceiling_date(empty_dates_format, unit='day'))
table(ceiling_date(empty_dates_format, unit='day'))
empty_dates_day <- ceiling_date(empty_dates_format, unit='day')
table(empty_dates_day)
class(empty_dates_day)
View(empty_dates_day)
empty_dates_day[1]
empty_dates_day[1][1]
empty_dates_day[1][1][1]
View(empty_dates_day)
rm(empty_dates)
rm(empty_dates_day)
rm(empty_dates_format)
# -> existem 31.033 registros com vento, umid e sesacao NA
empty_dates <- cepagiri[cepagiri['vento']=='']
# -> existem 31.033 registros com vento, umid e sesacao NA
empty_dates <- cepagiri[cepagiri['vento']=='']$horario
class(cepagiri)
# -> existem 31.033 registros com vento, umid e sesacao NA
empty_dates <- cepagiri[cepagiri['vento']=='', ]
# -> existem 31.033 registros com vento, umid e sesacao NA
empty_dates <- cepagiri[cepagiri['vento']=='', ]$horario
strpdate(empty_dates, format='%d/%m/%Y-%H:%M')
strptime(empty_dates, format='%d/%m/%Y-%H:%M')
# -> existem 31.033 registros com vento, umid e sesacao NA
empty_dates <- cepagiri[cepagiri['vento']=='', ]
View(empty_dates)
# -> existem 31.033 registros com vento, umid e sesacao NA
empty_dates <- cepagiri[is.NA(cepagiri['vento']), ]
# -> existem 31.033 registros com vento, umid e sesacao NA
empty_dates <- cepagiri[is.na(cepagiri['vento']), ]
# -> existem 31.033 registros com vento, umid e sesacao NA
empty_dates <- cepagiri[is.na(cepagiri['vento']), ]$horario
strptime(empty_dates, format='%d/%m/%Y-%H:%M')
empty_dates <- strptime(empty_dates, format='%d/%m/%Y-%H:%M')
class(empty_dates)
table(empty_dates)
table(round_date(empty_dates, unit='day'))
View(empty_dates)
empty_dates[:,1]
empty_dates[,1]
empty_dates[1]
empty_dates[1,1]
unclass(empty_dates[1])$year
unclass(empty_dates[1])
empty_dates[1]
class(empty_dates[1])
class(empty_dates[2])
unclass(empty_dates[2])
empty_dates <- as.POSIXct(empty_dates, format='%d/%m/%Y-%H:%M', tz='America/Sao_Paulo')
# -> existem 31.033 registros com vento, umid e sesacao NA
empty_dates <- cepagiri[is.na(cepagiri['vento']), ]$horario
empty_dates <- as.POSIXct(empty_dates, format='%d/%m/%Y-%H:%M', tz='America/Sao_Paulo')
empty_dates
empty_dates[1]
unclass(empty_dates[1])
unclass(empty_dates[1])$year
unclass(empty_dates)$year
as.Date(empty_dates)
table(as.Date(empty_dates))
plot_df <- table(as.Date(empty_dates))
class(plot_df)
plot_df
dim(plot_df)
as.data.frame.matrix(plot_df)
as.vector(plot_df)
row.names(plot_df)
summary(cepagiri)
cepagri$horario <- as.POSIXct(cepagri$horario,
format = '%d/%m/%Y-%H:%M',
tz = "America/Sao_Paulo")
csv_url <- url("https://ic.unicamp.br/~zanoni/cepagri/cepagri.csv")
col_names <- c("horario", "temp", "vento", "umid", "sensa")
cepagri <- read.table(csv_url,header=FALSE, fill=TRUE, sep=';', col.names=col_names)
summary(cepagiri)
cepagri$horario <- as.POSIXct(cepagri$horario,
format = '%d/%m/%Y-%H:%M',
tz = "America/Sao_Paulo")
rm(cepagiri)
gsub(cepagiri$temp,'[ERRO]',NA)
gsub(cepagri$temp,'[ERRO]',NA)
cepagri$temp=='[ERRO]'
cepagri[cepagri$temp=='[ERRO]']
cepagri[cepagri$temp like '[ERRO]']
cepagri[grep('[ERRO]',cepagri$temp]
cepagri[grep('[ERRO]',cepagri$temp)]
cepagri[grep('[ERRO]',cepagri$temp)]
cepagri$temp
cepagri[grep('[A-Z]+',cepagri$temp)]
grep('[A-Z]+',cepagri$temp)
cepagri[grep('[A-Z]+',cepagri$temp),]
cepagri[grep('[A-Z]+',cepagri$temp),] == NA
cepagri[grep('[A-Z]+',cepagri$temp),]
cepagri[grep('[A-Z]+',cepagri$temp),]$temp <- NA
cepagri[grep('[A-Z]+',cepagri$temp),]$temp
as.numeric(cepagri$temp)
cepagri$temp <- as.numeric(cepagri$temp)
inicio <- as.Date('2015-01-01')
fim <- as.Date('2020-12-31')
mascara_data <- (as.Date(cepagri$horario) >= inicio) & (as.Date(cepagri$horario) <= fim)
cepagri[janela,]
janela <- (as.Date(cepagri$horario) >= inicio) & (as.Date(cepagri$horario) <= fim)
cepagri[janela,]
cepagri_janela <- cepagri[janela,]
summary(cepagri)
tapply(as.date(cepagri_janela$horario), count)
cepagri_janela$horario
as.Date(cepagri_janela$horario)
class(as.Date(cepagri_janela$horario))
tapply(cepagri_janela$temp, as.date(cepagri_janela$horario), count)
tapply(cepagri_janela$temp, as.Date(cepagri_janela$horario), count)
class(cepagri_janela)
summary(cepagri_janela)
inicio <- as.Date('2015-01-01')
fim <- as.Date('2020-12-31')
janela <- (as.Date(cepagri$horario) >= inicio) & (as.Date(cepagri$horario) <= fim)
cepagri_janela <- cepagri[janela,]
summary(cepagri_janela)
inicio
class(inicio)
(as.Date(cepagri$horario) >= inicio) & (as.Date(cepagri$horario) <= fim)
(as.Date(cepagri$horario) >= inicio) & (as.Date(cepagri$horario) <= fim) == TRUE
as.Date(cepagri$horario)
class(as.Date(cepagri$horario))
cepagri[(as.Date(cepagri$horario) >= inicio),]
cepagri[(as.Date(cepagri$horario) >= inicio)& (as.Date(cepagri$horario) <= fim),]
max(cepagri[(as.Date(cepagri$horario) >= inicio)& (as.Date(cepagri$horario) <= fim),]$horario)
min(cepagri[(as.Date(cepagri$horario) >= inicio)& (as.Date(cepagri$horario) <= fim),]$horario)
min(cepagri[(as.Date(cepagri$horario) >= inicio & as.Date(cepagri$horario) <= fim),]$horario)
inicio <- as.POSIXct('2015-01-01',format= '%Y-%m-%d')
fim <- POSIXct('2020-12-31',format= '%Y-%m-%d')
inicio <- as.POSIXct('2015-01-01',format= '%Y-%m-%d')
fim <- POSIXct('2020-12-31',format= '%Y-%m-%d')
fim <- POSIXct('2020-12-31',format= '%Y-%m-%d',tz = "America/Sao_Paulo")
fim <- as.POSIXct('2020-12-31',format='%Y-%m-%d',tz = "America/Sao_Paulo")
janela <- (as.Date(cepagri$horario) >= inicio) & (as.Date(cepagri$horario) <= fim)
cepagri_janela <- cepagri[janela,]
summary(cepagri_janela)
fim <- as.POSIXct('2020-12-31',format='%Y-%m-%d')
inicio <- as.POSIXct('2015-01-01',format='%Y-%m-%d')
janela <- (as.Date(cepagri$horario) >= inicio) & (as.Date(cepagri$horario) <= fim)
cepagri_janela <- cepagri[janela,]
summary(cepagri_janela)
janela <- (as.Date(cepagri$horario) >= inicio & as.Date(cepagri$horario) <= fim)
cepagri_janela <- cepagri[janela,]
summary(cepagri_janela)
cepagri <- cepagri[!is.na(cepagri$temp),]
cepagri$temp <- as.numeric(cepagri$temp)
inicio <- as.POSIXct('2015-01-01',format='%Y-%m-%d')
fim <- as.POSIXct('2020-12-31',format='%Y-%m-%d')
janela <- (as.Date(cepagri$horario) >= inicio & as.Date(cepagri$horario) <= fim)
cepagri_janela <- cepagri[janela,]
summary(cepagri_janela)
cepagari[is.na(cepagri_janela$temp),]
cepagri_janela[is.na(cepagri_janela$temp),]
summary(cepagri)
inicio <- as.POSIXct('2015-01-01',format='%Y-%m-%d')
fim <- as.POSIXct('2020-12-31',format='%Y-%m-%d')
janela <- (as.Date(cepagri$horario) >= inicio & as.Date(cepagri$horario) <= fim)
cepagri_janela <- cepagri[janela,]
summary(cepagri_janela)
count(cepagari)
count(cepagri)
count(cepagri_janela)
